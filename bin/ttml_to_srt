#!/usr/bin/env python
# encoding: utf-8

import sys
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta

NS = {'ttml': 'http://www.w3.org/ns/ttml'}
INPUT_TIME_FORMAT = '%H:%M:%S.%f'


def format_timedelta(td):
    # Extract for final output.
    microseconds = td.microseconds
    td = td - timedelta(microseconds=td.microseconds)

    hours, remainder = divmod(td.total_seconds(), 3600)
    minutes, seconds = divmod(remainder, 60)

    return '{:02.0f}:{:02.0f}:{:02.0f},{:03.0f}'.format(
        hours, minutes, seconds, microseconds / 1000)


def is_tag(element_tag, plain_tag):
    return element_tag == '{%s}%s' % (NS['ttml'], plain_tag)


if len(sys.argv) != 2:
    print('Needs exactly one argument for the input file')
    sys.exit(1)

with open(sys.argv[1]) as f:
    tree = ET.parse(f)
    root = tree.getroot()
    entries = []
    for elem in root.findall('.//*[@begin]', NS):
        # The elements look like this:
        # <p begin="00:01:39.240" dur="00:00:03.000" style="left">

        begin = datetime.strptime(elem.attrib['begin'], INPUT_TIME_FORMAT)
        begin_delta = timedelta(
            hours=begin.hour,
            minutes=begin.minute,
            seconds=begin.second,
            microseconds=begin.microsecond
        )

        duration = datetime.strptime(elem.attrib['dur'], INPUT_TIME_FORMAT)
        duration_delta = timedelta(
            hours=duration.hour,
            minutes=duration.minute,
            seconds=duration.second,
            microseconds=duration.microsecond
        )

        end_delta = begin_delta + duration_delta
        time_header = '{} --> {}'.format(
            format_timedelta(begin_delta),
            format_timedelta(end_delta)
        )

        text = elem.text.strip() if elem.text else ''

        for sub_elem in elem:
            if is_tag(sub_elem.tag, 'br'):
                text += '\n'
                text += sub_elem.tail.strip() if sub_elem.tail else ''
            elif is_tag(sub_elem.tag, 'span') and sub_elem.attrib['style'] == 'italic':
                text += '<i>{}</i>'.format(sub_elem.text.strip(' ') if sub_elem.text else '')
            else:
                print('Did not recognize sub-element: {}'.format(sub_elem))

        text += elem.tail.strip() if elem.tail else ''

        entries.append('{}\n{}'.format(time_header, text))

    for index, entry in enumerate(entries):
        print('{}\n{}\n'.format(index + 1, entry))
